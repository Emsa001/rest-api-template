#!/usr/bin/env node

/*
 Module dependencies.
*/

const app = require("../src/app");
const debug = require("debug")("node-mysql-jwt:server");
const https = require("https");
const http = require("http");
const fs = require("fs");
const logger = require("../src/utils/consoleLog");

/*
 Get port from environment and store in Express.
*/

const port = normalizePort(process.env.PORT);
app.set("port", port);

/*
    Create HTTP server.
*/
let server;
if (process.env.HTTPS == true) {
    const privateKeyPath = "../certs/private.key";
    const certificatePath = "../certs/certificate.crt";

    if (!fs.existsSync(privateKeyPath) || !fs.existsSync(certificatePath)) {
        logger.error("Certificate", "/certs/private.key or /certs/certificate.key not found", false);
        return false;
    }
    const privateKey = fs.readFileSync(privateKeyPath, "utf8");
    const certificate = fs.readFileSync("../certs/certificate.crt", "utf8");
    const credentials = { key: privateKey, cert: certificate };
    server = https.createServer(credentials, app);
} else {
    server = http.createServer(app);
}

/*
 Listen on provided port, on all network interfaces.
*/

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/*
 Normalize a port into a number, string, or false.
*/

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            logger.error("Port", bind + " requires elevated privileges", false);
            process.exit(1);
            break;
        case "EADDRINUSE":
            logger.error("Port", bind + " is already in use", false);

            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}
